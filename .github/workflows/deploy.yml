name: Deploy to Production Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deploy Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests (if available)
      run: npm run test --if-present

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # 构建Docker镜像
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到服务器
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        SSL_EMAIL: ${{ secrets.SSL_EMAIL }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        # 创建部署目录
        ssh $SERVER_USER@$SERVER_HOST "mkdir -p /opt/roi-frontend"
        
        # 复制部署文件到服务器
        scp -r docker-compose.prod.yml nginx.prod.conf deploy-server.sh $SERVER_USER@$SERVER_HOST:/opt/roi-frontend/
        
        # 在服务器上执行部署
        ssh $SERVER_USER@$SERVER_HOST "
          cd /opt/roi-frontend
          chmod +x deploy-server.sh
          
          # 拉取最新镜像
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull $IMAGE_TAG
          docker tag $IMAGE_TAG roi-frontend:latest
          
          # 设置环境变量并部署
          export DOMAIN_NAME='$DOMAIN_NAME'
          export SSL_EMAIL='$SSL_EMAIL'
          ./deploy-server.sh deploy
        "

    - name: Health check
      run: |
        # 等待服务启动
        sleep 30
        
        # 健康检查
        curl -f http://${{ secrets.SERVER_HOST }}/health || (
          echo "Health check failed"
          exit 1
        )

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          部署状态: ${{ job.status }}
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
          访问地址: https://${{ secrets.DOMAIN_NAME }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 回滚功能
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_env == 'rollback'
    environment: production
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Rollback deployment
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /opt/roi-frontend
          
          # 查找最新的备份镜像
          BACKUP_IMAGE=\$(docker images roi-frontend --format 'table {{.Repository}}\t{{.Tag}}' | grep backup | head -n 1 | awk '{print \$2}')
          
          if [ -n \"\$BACKUP_IMAGE\" ]; then
            echo \"回滚到版本: \$BACKUP_IMAGE\"
            docker tag roi-frontend:\$BACKUP_IMAGE roi-frontend:latest
            ./deploy-server.sh restart
          else
            echo \"没有找到备份版本\"
            exit 1
          fi
        "